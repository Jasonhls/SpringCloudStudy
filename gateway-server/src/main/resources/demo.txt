Spring Cloud Gateway支持三种类型的路由：静态路由，动态路由和自动路由。
1、静态路由：
静态路由是指在配置文件中预先定义好的路由规则，它们在应用启动时就已经存在。
静态路由的优点是可以快速定位和处理请求，缺点是需要手动配置，不支持动态添加、修改和删除路由规则。
spring:
  cloud:
    gateway:
      routes:
        - id: service1
          uri: http://localhost:8081
          predicates:
            - Path=/service1/**
        - id: service2
          uri: http://localhost:8082
          predicates:
            - Path=/service2/**
这段配置文件定义了两个静态路由规则，分别对应于服务 service1 和服务 service2。
当请求的路径匹配 /service1/** 时，它就会被转发到 http://localhost:8081；
当请求的路径匹配 /service2/** 时，它就会被转发到 http://localhost:8082。
2、动态路由
动态路由是指在运行时动态添加、修改和删除路由规则，可以根据不同的条件动态地调整路由规则，
例如根据请求路径、请求头、请求参数等条件。动态路由的优点是可以根据实际情况调整路由规则，
缺点是需要额外的管理和维护成本。
在 Spring Cloud Gateway 中，可以通过 API 来动态添加、修改和删除路由规则。例如：
@Autowired
private RouteDefinitionWriter routeDefinitionWriter;

public void addRoute(String id, String uri, String predicates) {
    RouteDefinition routeDefinition = new RouteDefinition();
    routeDefinition.setId(id);
    routeDefinition.setUri(URI.create(uri));
    routeDefinition.setPredicates(Collections.singletonList(new PredicateDefinition(predicates)));
    routeDefinitionWriter.save(Mono.just(routeDefinition)).subscribe();
}

public void updateRoute(String id, String uri, String predicates) {
    RouteDefinition routeDefinition = new RouteDefinition();
    routeDefinition.setId(id);
    routeDefinition.setUri(URI.create(uri));
    routeDefinition.setPredicates(Collections.singletonList(new PredicateDefinition(predicates)));
    routeDefinitionWriter.delete(Mono.just(routeDefinition.getId())).then(Mono.defer(() -> {
        routeDefinitionWriter.save(Mono.just(routeDefinition)).subscribe();
        return Mono.empty();
    })).subscribe();

}

public void deleteRoute(String id) {
    routeDefinitionWriter.delete(Mono.just(id)).subscribe();
}
通过注入 RouteDefinitionWriter 对象来操作路由规则。 addRoute 方法可以添加一条路由规则， updateRoute 方法可以修改一条路由规则，
deleteRoute 方法可以删除一条路由规则。这些操作会实时生效，不需要重启应用。
需要在 Spring Boot 应用启动时加载 RouteDefinitionLocator 对象，以便正确加载动态路由规则。
3. 自动路由
自动路由是指根据服务注册中心的服务信息自动生成路由规则。当有新的服务上线或下线时，路由规则也会自动更新。
自动路由的优点是可以根据实际情况自动调整路由规则，缺点是需要服务注册中心的支持。其实服务发现可以支持很多种，主要实现spring cloud 提供的接口即可。

服务发现功能的实现可以通过 Spring Cloud Commons 中的 DiscoveryClient 类实现。Spring Cloud
Discovery 可以与多种服务发现组件集成，包括 Eureka、Consul、Zookeeper 等。Spring Cloud
Gateway 会自动与 Spring Cloud Discovery 集成，可以使用 Spring Cloud Discovery
来获取服务实例列表，并将这些服务实例转换为路由规则。大家感兴趣可以先了解一下这两个接口

在 Spring Cloud Gateway 中，可以通过配置服务注册中心来启用自动路由功能。例如：
spring:
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true